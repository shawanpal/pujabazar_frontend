/**
 * Created by Marven Gong of Etekcity on 2016/3/31.
 */
(function($){
    "use strict";
    var NiceSelect=function(ele,_option){

        var NS=this;
        this.targetObj=ele;
        this.option=_option;
        $(document).click(function(){
           NS.closeDrop();
        });
        this.init();
    };
    NiceSelect.prototype.init=function(){
        //console.log(this);
        var self=$(this.targetObj);
        var ns=this;
        var _option=this.option;
        //在下拉框外面包裹一层div，以便控制后面的节点
        var _nsWraper=$('<div class="ns-wraper "></div>');
        _nsWraper.addClass(this.option.nsWraperDiyClass);
        self.wrap(_nsWraper);
        //添加下拉列表的容器
        var nsDropContainer=$("<div class='ns-drop-container'></div>");
        //添加显示当前值以及下拉箭头的容器
        var nsLabel=$('<a class="ns-label" href="javascript:;"></a>');
        nsLabel.addClass(this.option.nsLabelDiyClass);
        nsLabel.on("click",{target:self},this.openDrop);
        nsLabel.text(self.find("option:selected").text());
        //安放ul列表的div
        var nsDropList=$("<div class='ns-drop-list'></div>");
        nsDropList.addClass(this.option.nsDropListDiyClass);
        nsDropList.on("click",{},this.stopPropagation);
        //生成列表
        var nsDropUl=$("<ul></ul>");
        //循环下拉框select的option，根据值和内容生成下拉列表的内容
        self.find("option").each(function(index,opt){
            var oLi=$('<li></li>');
            oLi.attr("data-ns-value",$(opt).val());
            oLi.attr("data-ns-option-index",index);
            oLi.text($(opt).text());
            /**
             * 判断是否已选中当前循环的项，如果是，加上已选中的class
             */
            if($(opt).is(":selected")){
                oLi.addClass(_option.nsDropItemSelectedDiyClass);
            }
            if($(opt).is(":disabled")){
                oLi.addClass("ns-drop-list-item-disabled");
            }else{
                oLi.on("click",{
                        nsOptionIndex:index,
                        target:self,
                        value:$(opt).val(),
                        text:$(opt).text(),
                        nsOption:ns.option
                    },
                    ns.selectOption
                );
            }
            //将生成的列表内容append给列表
            nsDropUl.append(oLi);
        })
        nsDropList.append(nsDropUl);
		var optionCount=self.find("option").size();
        //如果下拉选项个数超过十个，生成滚动条
        if(optionCount>=10){
            nsDropList.css({"max-height":"250px","overflow-y":"scroll"});
        }
        nsDropContainer.append(nsLabel).append(nsDropList);
        self.parent(".ns-wraper").append(nsDropContainer);
        self.hide();
    };
    /**
     * 阻止事件冒泡，用于点击事件，点击下拉框和label以外的区域关闭下拉列表
     * @param e
     */
    NiceSelect.prototype.stopPropagation=function(e) {
        //判断是否是IE浏览器，不是就用e.stopPropagation否则用 e.cancelBubble=true阻止事件冒泡
        if(e.stopPropagation){
            e.stopPropagation();
        }else {
            e.cancelBubble = true;
        }
    };
    /**
     * 点击选项执行选择操作
     * @param e
     */
    NiceSelect.prototype.selectOption=function(e){
        var _nsOption= e.data.nsOption;
        var _index= e.data.nsOptionIndex;
        var _selectTarget= e.data.target;
        //修改label的显示文字为选中的项的文本
        _selectTarget.parent(".ns-wraper").find(".ns-label").text(e.data.text);
        //让对应的选项的option选中
        _selectTarget.parent(".ns-wraper").find("select option").removeAttr("selected").eq(_index).attr("selected","selected");
        //修改当前select的值
        _selectTarget.parent(".ns-wraper").find("select").val(e.data.value);
        //触发当前select的change事件，以便执行另外的事件绑定
        _selectTarget.parent(".ns-wraper").find("select").trigger("change");

        _selectTarget.parent(".ns-wraper").find(".ns-drop-list").find("li").removeClass(_nsOption.nsDropItemSelectedDiyClass);
        $(this).addClass(_nsOption.nsDropItemSelectedDiyClass);
        //隐藏当前下拉列表
        _selectTarget.parent(".ns-wraper").find(".ns-drop-list").hide();
    };
    /**
     * 打开当前下拉列表
     * @param e
     */
    NiceSelect.prototype.openDrop=function(e){
        //console.log(this);这里的this指代的是点击的dom事件了

        NiceSelect.prototype.stopPropagation(e);
        NiceSelect.prototype.closeDrop();
        var _selectTarget= e.data.target;
		//给当前下拉的label添加选中的class
		$(this).addClass("focus");
        _selectTarget.parent(".ns-wraper").find(".ns-drop-list").show();
    };
    /**
     * 关闭下拉列表
     */
    NiceSelect.prototype.closeDrop=function(){
		//移除所有的label的选中的class
		$(".ns-label").removeClass("focus");
        $(".ns-drop-list").hide();
    };
    /**
     * 去除控件的NiceSelect包裹元素。
     */
    NiceSelect.prototype.restoreDom=function(){
        var select=this.targetObj;
        //移除select外面的包裹层
        $(select).parent(".ns-wraper").find(".ns-drop-container").remove();
        //显示原生的select控件
        $(select).unwrap(".ns-wraper").show();
    };
    /**
     * 重新初始化插件
     */
    NiceSelect.prototype.update=function(){
        this.restoreDom();
        //重新生成节点
        this.init();
    }
    /**
     * 销毁插件
     */
    NiceSelect.prototype.destroy=function(){
        this.restoreDom();
        var select=this.targetObj;
        //移除绑定在控件上的插件实例方法
        $(select).removeData("NiceSelect");
    };
    $.fn.niceSelect=function(option){

       // console.log(niceSelect);
        var defaults = {
            nsWraperDiyClass: "ns-wraper-default",
            nsLabelDiyClass: "ns-label-default",
            nsDropListDiyClass: "ns-drop-list-default",
            nsDropItemSelectedDiyClass: "ns-drop-list-item-selected-default"
        };
        var settings={};
        if(option==="update"||option==="destroy"){
            settings=defaults;
        }else{
            settings= $.extend({}, defaults, option);
        }

        this.each(function(index,select){
            /*
            * 判断是否手动执行update，如果是，直接调用绑定在节点select上的实例的init()方法更新组件
            * 如果不是，则执行下面的操作
            * */
            if(option==="update"){
                var NS=$(select).data("NiceSelect");
                NS.update();
            }
            else if(option==="destroy"){
                var NS=$(select).data("NiceSelect");
                if(NS!=null && NS!="undefined" && NS instanceof NiceSelect){
                    NS.destroy();
                }else{
                    return;
                }

            }
            /*如果执行的不是更新操作，先判断当前组件是否已经创建NiceSelect实例，
            *如果已经创建，则不再创建新的实例，防止内存溢出
            */
            else{
                var NS=$(select).data("NiceSelect");
                if(NS!=null && NS!="undefined" && NS instanceof NiceSelect){
                    NS.destroy();
                    NS.init();
                }else{
                    $(select).data("NiceSelect",new NiceSelect(select,settings));
                }
            }
        })
    }
})($)